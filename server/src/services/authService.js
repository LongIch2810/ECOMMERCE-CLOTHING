const User = require("../models/userModel");
const Cart = require("../models/cartModel");
const OTP = require("../models/otpModel");
const generateToken = require("../utils/generateToken");
const generateOTP = require("../utils/generateOTP");
const sendMail = require("../utils/email");

const loginService = async (data) => {
  const { email, password } = data;
  try {
    //check user
    const user = await User.findOne({ email });
    if (!user) {
      return { SC: 404, success: false, message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i !" };
    }

    //check password
    const isMatch = await user.matchPassword(password);
    if (!isMatch) {
      return { SC: 401, success: false, message: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c !" };
    }

    const token = generateToken({ id: user._id, role: user.role });

    return { SC: 200, success: true, token, message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng !" };
  } catch (error) {
    console.log(error);
    return {
      SC: 500,
      success: false,
      message: error.message,
    };
  }
};

const registerService = async (data) => {
  const { name, email, password, role } = data;
  try {
    const user = await User.findOne({ $or: [{ email }, { name }] });
    if (user) {
      return {
        SC: 400,
        success: false,
        message: "Ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i !",
      };
    }

    const newUser = await User.create({ name, email, password, role });
    await newUser.save();

    await Cart.create({
      user: newUser._id,
    });

    const token = generateToken({ id: newUser._id, role: newUser.role });

    return {
      SC: 201,
      success: true,
      token,
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng !",
    };
  } catch (error) {
    console.log(error);
    return {
      SC: 500,
      success: false,
      message: error.message,
    };
  }
};

const sendOTPService = async (email) => {
  try {
    const user = await User.findOne({ email });
    if (!user) {
      return { SC: 404, success: false, message: "Email kh√¥ng t·ªìn t·∫°i !" };
    }
    const code = generateOTP();
    const otp = new OTP({ user: user._id, code });
    await otp.save();

    const subject = "M√£ x√°c th·ª±c OTP c·ªßa b·∫°n üîí";

    const body = `
    <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 500px; margin: auto; border: 1px solid #ddd; border-radius: 10px;">
      <h2 style="color: #333;">X√°c th·ª±c t√†i kho·∫£n</h2>
      <p>Xin ch√†o <strong>${user?.name || "b·∫°n"}</strong>,</p>
      <p>ƒê√¢y l√† m√£ OTP c·ªßa b·∫°n: </p>
      <h2 style="text-align: center; font-size: 24px; color: #007bff;">${code}</h2>
      <p>M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong>10 ph√∫t</strong>. Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.</p>
      <p>Tr√¢n tr·ªçng,</p>
      <p><strong>ƒê·ªôi ng≈© h·ªó tr·ª£</strong></p>
      <hr style="border: none; border-top: 1px solid #ddd;">
      <p style="font-size: 12px; color: #777;">ƒê√¢y l√† email t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
    </div>
  `;

    await sendMail(email, subject, body);

    return {
      SC: 200,
      success: true,
      message:
        "ƒê√£ g·ª≠i m√£ OTP t·ªõi email c·ªßa b·∫°n, vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n !",
    };
  } catch (error) {
    console.log(error);
    return {
      SC: 500,
      success: false,
      message: error.message,
    };
  }
};

const resetPasswordService = async ({ user_id, newPassword }) => {
  try {
    const user = await User.findById(user_id);
    if (!user)
      return { SC: 404, success: false, message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" };

    user.password = newPassword;

    await user.save();

    return { SC: 200, success: true, message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" };
  } catch (error) {
    console.log(error);
    return {
      SC: 500,
      success: false,
      message: error.message,
    };
  }
};

module.exports = {
  loginService,
  registerService,
  sendOTPService,
  resetPasswordService,
};
